- 1.1 Getting Started
- 1.2 Elements of Programming
- 1.3 Defining New Functions
- 1.4 Designing Functions
- 1.5 Control
- 1.6 Higher Order Functions
    - using summation function as an example
        - you can have multiple types of summations (depends on the expression you want)
        - how do you remove all this boilerplate code like looping i=0, to n?
        - the thing that changes (express) can be passed in as an argument. This expression is itself a function which takes in variables as an argument
    - another example is calculating pi. You have multiple area formulas for different shapes, You can abstract it to area(radius, expression) where radius*radius*expression and expression is the function of the different shapes you want to pass in. 
    - passing in functions as a parameter (higher order functions)
    - returning functions (higher order functions)
    - Higher order functions allows you to abstract away computation, reduce reptitive code, almost recursive nature
    - every function has a parent frame
        - typically global frame
        - an inner function points to parent frame
        - this is how nested functions are evaluated
            - if it can't find variable in current frame, look at parent frame
            
    - lambda functions
- 1.7 Recursive Functions
    - Mutual Recursion
        - When recursive procedure is divided among 2 functions that call each other
        - Example of mutual Recursion:
        - 2 player game
        - n pebbles on table, Alice and bob
            - Alice takes single pebble
            - Bob takes 2 pebbles if even num of pebbles, 1 otherwise
        - Who wins?
        - Use mutual recursion taking advantage of the turn based game by calling the other function when finishing
        - Code:
            - def play_alice(n):
                if n == 0:
                    print("bob wins")
                else:
                    play_bob(n-1)
              
              def play_bob(n):
                if n == 0:
                    print("alice wins")
                elif is_even(n):
                    play_alice(n-2)
                else:
                    play_alice(n-1)

    - Tree Recursion
        - when function calls itself more than once with a single line of code
        - Example:
            fib(n):
                ...
                return fib(n-2) + fib(n-1)
        